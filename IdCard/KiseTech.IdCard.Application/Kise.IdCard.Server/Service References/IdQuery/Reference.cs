//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kise.IdCard.Server.IdQuery {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IdQuery.IIdQueryProvider")]
    public interface IIdQueryProvider {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdQueryProvider/QueryIdCard", ReplyAction="http://tempuri.org/IIdQueryProvider/QueryIdCardResponse")]
        string QueryIdCard(string queryType, string queryString);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IIdQueryProvider/QueryIdCard", ReplyAction="http://tempuri.org/IIdQueryProvider/QueryIdCardResponse")]
        System.IAsyncResult BeginQueryIdCard(string queryType, string queryString, System.AsyncCallback callback, object asyncState);
        
        string EndQueryIdCard(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IIdQueryProviderChannel : Kise.IdCard.Server.IdQuery.IIdQueryProvider, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class QueryIdCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public QueryIdCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IdQueryProviderClient : System.ServiceModel.ClientBase<Kise.IdCard.Server.IdQuery.IIdQueryProvider>, Kise.IdCard.Server.IdQuery.IIdQueryProvider {
        
        private BeginOperationDelegate onBeginQueryIdCardDelegate;
        
        private EndOperationDelegate onEndQueryIdCardDelegate;
        
        private System.Threading.SendOrPostCallback onQueryIdCardCompletedDelegate;
        
        public IdQueryProviderClient() {
        }
        
        public IdQueryProviderClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IdQueryProviderClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IdQueryProviderClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IdQueryProviderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<QueryIdCardCompletedEventArgs> QueryIdCardCompleted;
        
        public string QueryIdCard(string queryType, string queryString) {
            return base.Channel.QueryIdCard(queryType, queryString);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginQueryIdCard(string queryType, string queryString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginQueryIdCard(queryType, queryString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndQueryIdCard(System.IAsyncResult result) {
            return base.Channel.EndQueryIdCard(result);
        }
        
        private System.IAsyncResult OnBeginQueryIdCard(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string queryType = ((string)(inValues[0]));
            string queryString = ((string)(inValues[1]));
            return this.BeginQueryIdCard(queryType, queryString, callback, asyncState);
        }
        
        private object[] OnEndQueryIdCard(System.IAsyncResult result) {
            string retVal = this.EndQueryIdCard(result);
            return new object[] {
                    retVal};
        }
        
        private void OnQueryIdCardCompleted(object state) {
            if ((this.QueryIdCardCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.QueryIdCardCompleted(this, new QueryIdCardCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void QueryIdCardAsync(string queryType, string queryString) {
            this.QueryIdCardAsync(queryType, queryString, null);
        }
        
        public void QueryIdCardAsync(string queryType, string queryString, object userState) {
            if ((this.onBeginQueryIdCardDelegate == null)) {
                this.onBeginQueryIdCardDelegate = new BeginOperationDelegate(this.OnBeginQueryIdCard);
            }
            if ((this.onEndQueryIdCardDelegate == null)) {
                this.onEndQueryIdCardDelegate = new EndOperationDelegate(this.OnEndQueryIdCard);
            }
            if ((this.onQueryIdCardCompletedDelegate == null)) {
                this.onQueryIdCardCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnQueryIdCardCompleted);
            }
            base.InvokeAsync(this.onBeginQueryIdCardDelegate, new object[] {
                        queryType,
                        queryString}, this.onEndQueryIdCardDelegate, this.onQueryIdCardCompletedDelegate, userState);
        }
    }
}
